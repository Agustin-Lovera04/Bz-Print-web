PARA SUBIR CAMBIOS A DEPLOY  (TEORIA ARRIBA)

        PARA EL HOSTING RECORDAR QUE SE PUEDE USAR EL HOSTING DE FIREBASE, AVERIGUAR, COMO ES, SI ES BUENO Y SI ES GRATIS
            
        Crea un proyecto de Firebase: Si aún no tienes uno, ve a la consola de Firebase y crea un nuevo proyecto. Asegúrate de que el nombre del proyecto sea descriptivo.

        Instala el CLI de Firebase: El CLI de Firebase es una herramienta de línea de comandos que te permite interactuar con tu proyecto de Firebase. Puedes instalarlo usando npm:

             npm install -g firebase-tools .


        Inicializa tu proyecto: En la carpeta de tu proyecto, ejecuta el comando firebase init . Esto te guiará a través de la configuración inicial, incluyendo la selección de Firebase Hosting.

        Configura tu sitio web: Firebase Hosting admite varios frameworks y lenguajes. Puedes usar HTML, CSS, JavaScript, React, Angular, Vue.js, etc.

        Despliega tu sitio web: Una vez que tu sitio web esté listo, puedes desplegarlo usando el comando firebase deploy . Esto subirá tu sitio web a los servidores de Firebase Hosting.

        Configura un dominio personalizado (opcional): Si quieres usar tu propio dominio, puedes conectarlo a tu sitio web de Firebase Hosting.


        2-npm run build ( construye y refleja los cambios de codigo)

        3-firebase deploy



CAMBIOS:

QUEDAMOS EN:

 OK------- - Combos armables en lugar de carrousel (envio graris y 10% de descuentos)
 OK--------- - promos normales solo 10% de descuento
 OK---------  - productos destacados sin descuento pero a la vista  (excel en chat de ale)

  TERMINAR ESTILOS
      CONTROLAR TODO EL FUNCIONAMINETO PROBAR TODO, PAGINADO, BUSQUEDA POR TITULO, FILTRO Y PROCESO DE COMPRA + COMBO  

TODO OK SUBIR CAMIBOS


ATENCION!

!!!https://uiverse.io/SachinKumar666/new-donkey-55 POSIBL PLANTILLA PARA REEESTRUCTURACION

  RECORDAR CADA VEZ QUE HAGAMOS UN VUELCO  - ACTUALIZAR EN CONSULTA PPAL Y EN DFETALLE

  CONTROLAR PERSISTENCIA, BORRAR VIEJA
  Debemos implementar paginado en los productos que son resultados de una busqueda

  ·CATEGORIZAR POR SECTOR LIBRERIA, MOCHILA ETC Sin boton directamente





CAMBIOS FUTUROS:
	https://www.libreriasacapuntas.com.ar/

	"me gusta la parte de abajo que dice envios a todo el pais"
	"los horarios de atencion tambien"
	"tambien me gusta la parte de nuestra historia"
	"me gustaria poner una foto de bz o algo asi"
	"me gusta tambien como tienen las categorias armadas"

	https://www.librerialacentral.com.ar/ INSPIRACION






ANOTACIONES FUTURAS: ( Como mantenimiento mes a mes)

-Podemos procesar mas todavias las img, se ven re bien

-REESTRUCTURAR TODO CON BOOTSTRAP SI O SI NO DA PARA MAS EL DISEÑO 

-VALIDACION DE ERRORES ( si o si como en la funcion dew carrito)



ANOTACIONES PERSONALES:

-https://gemini.google.com/app/f6c92925925be40c
(teoria de versionado, y teoria de deploy de hosting GIT + FIREBASE)

-BUSCAR ESTRUCTURA DE FRONT UE TENGA EL NAVBAR ARRIBA EL MAIN OCUPANDO TODO Y EL FOOTER ABAO
(https://www.youtube.com/shorts/Zf_3i6Ij46w)

-NECESITO EMPEZAR A USAR CON BUENAS PRATICAS EL BOOTSTRAP










COMPONENTE CART ORIGINAL ANTES DE LOS CAMBIOS POR LAS DUDAS
import { Button } from "react-bootstrap";
import { CartContext } from "../../context/cartContext";
import { useContext, useEffect } from "react";
import { Table } from "react-bootstrap";
import basuraIMG from "/images/basura.png";
import "./style-cartContainer.css";
import { Link } from "react-router-dom";

function formatNumber(num) {
    return num.toLocaleString("es-ES", {
        minimumFractionDigits: 2,
        maximumFractionDigits: 3,
    });
}

export const CartComponent = () => {
    const { 
        cart, 
        cleanCart, 
        totalPriceCart, 
        substractQuantityInCart, 
        addQuantityInCart, 
        removeProdInCart, 
        setSend 
    } = useContext(CartContext);


    function hasComboInCart() {
        return cart.some(product => product.title.toLowerCase().includes("combo"));
    }
    

      function more5ProductsInCart() {
        return cart.length >= 5;
      }


    function returnCostSend(total) {
        if (hasComboInCart()) {
            setSend(0);
            return 0;
        }
        if(more5ProductsInCart()) {
            setSend(0);
            return 0
        }
        let cost = 0;
        if (total === 0) {
            cost = 0;
        } else if (total <= 5000) {
            cost = 1000;
        } else if (total > 5000 && total <= 20000) {
            cost = 2000;
        } else {
            cost = 3000;
        }

        setSend(cost)
        return cost;
    }


    function cartLength ( ) {
        let valid = false
        if(cart.length > 0){
            valid = true
        }

        return valid
    }
    return (
        <div className="bg-light cart-Container">
            <h1 className="text-center fw-bold">CARRITO</h1>
            <div className="prodsInCart-Container">
                <div className="tables-Container">
                    <div className="table-scroll">
                    <Table striped bordered hover variant="secondary">
                            <thead>
                                <tr>
                                    <th>UNIDADES</th>
                                    <th>PRODUCTO</th>
                                    <th>CODIGO</th>
                                    <th>PRECIO UNITARIO</th>
                                    <th>SUBTOTAL</th>
                                </tr>
                            </thead>
                            <tbody>
                                {cart.map((p) => (
                                    <tr key={p.code}>
                                        <td>
                                            <div className="d-flex flex-column justify-content-center align-items-center">
                                                <span className="fw-bold">x{p.quantity}</span>
                                                <div className="d-flex justify-content-around align-items-center">
                                                    <Button
                                                        className="btn-danger btnOption"
                                                        onClick={() => substractQuantityInCart(p.code)}
                                                    >
                                                        <span className="fw-bold">-</span>
                                                    </Button>
                                                    <Button
                                                        className="btn-success btnOption"
                                                        onClick={() => addQuantityInCart(p.code)}
                                                    >
                                                        <span className="fw-bold">+</span>
                                                    </Button>
                                                    <Button
                                                        className="btn-danger btnOption"
                                                        onClick={() => removeProdInCart(p.code)}
                                                    >
                                                        <img className="trash" src={basuraIMG} alt="Eliminar" />
                                                    </Button>
                                                </div>
                                            </div>
                                        </td>
                                        <td>{p.title}</td>
                                        <td>{p.code}</td>
                                        <td>$ {formatNumber(p.price)}.-</td>
                                        <td>$ {formatNumber(p.price * p.quantity)}.-</td>
                                    </tr>
                                ))}
                            </tbody>
                        </Table>
                    </div>


                    <div className="table-scroll">
                        <Table striped bordered hover variant="secondary">
                            <thead>
                                <tr>
                                    <th className="fw-bold">TOTAL APROXIMADO</th>
                                    <th className="fw-bold">ENVÍO</th>
                                    <th className="fw-bold">TOTAL FINAL APROXIMADO</th>
                                </tr>
                            </thead>
                            <tbody>
                                <tr>
                                <td>$ {formatNumber(totalPriceCart)}.-</td>
                                <td>$ {formatNumber(returnCostSend(totalPriceCart))}.-</td>
                                <td>$ {formatNumber(totalPriceCart + returnCostSend(totalPriceCart))}.-</td>
                                </tr>
                            </tbody>
                        </Table>
                    </div>

                    <div className="d-flex flex-row">
                        <Button className="m-2 btn-danger" onClick={() => cleanCart()}>Vaciar Carrito</Button>
                        
                        {cartLength() ? 
                        
                        <Link className="m-2" to={'/confirmBuy'}>
                            <Button className="btn-success">Confirmar compra</Button>
                        </Link> :
                        <div className="alert alert-warning m-2">No hay productos en carrito</div>
                    }
                        
                    </div>
                </div>
                <div className="m-2 mt-0 alerts-Container">
                    <ul className="alert alert-warning p-4">
                        <span className="fw-bold">COSTO DE ENVÍOS: </span><br />
                        <li>En compras hasta <span className="fw-bold">$5.000.-</span> <br />El costo de envío: <span className="fw-bold">$1.000.- </span><br /></li>
                        <li>En compras hasta <span className="fw-bold">$20.000.- </span><br />El costo de envío: <span className="fw-bold">$2.000.- </span><br /></li>
                        <li>En compras mayores a <span className="fw-bold">$20.000.-</span> <br />El costo de envío: <span className="fw-bold">$3.000.-</span></li>
                    </ul>
                    <div className="alert alert-danger">
                        Informamos que algunos de nuestros productos pueden encontrarse sin Precio, por lo tanto, si es el caso de Ud., ha agregado dichos productos a su carrito <span className="fw-bold">el monto final puede ser APROXIMADO.</span>
                    </div>
                </div>
            </div>
        </div>
    );
};


CONTAINER ORIGINAL

import { useEffect, useState } from "react";
import { collection, getDocs } from "firebase/firestore";
import { db } from "../../firebase/client.js";
import { ProductsList } from "../productsList-Component/productsList.jsx";
import fibronesIMG from "/images/fibrones.png";
import ReactPaginate from "react-paginate";
import "./style-productsContainer.css";
import { Loader } from "../loader/loader.jsx";
import { useParams } from "react-router-dom";
import { Error } from "../errorComponent/error.jsx";
import { ProductsOFFList } from "../productsOFFList-Component/productsOFFList.jsx";
import Carrousel from "../Carrousel/Carrousel.jsx";

export const ProductsComponent = () => {
  const { title } = useParams();
  const [loading, setLoading] = useState(true);
  const [products, setProducts] = useState([]);
  const [productsOFF, setProductsOFF]  = useState([])
  const [currentProducts, setCurrentProducts] = useState([]);
  const [pageCount, setPageCount] = useState(0);
  const [productOffset, setProductOffset] = useState(0);
  const [error, setError] = useState(null);
  const productsPerPage = 16;

  const productsRef = collection(db, "products");

  useEffect(() => {
    const getProducts = async () => {
      try {
        const data = await getDocs(productsRef);
        const productsData = data.docs.map((doc) => ({
          ...doc.data(),
          id: doc.id,
        }));
        setProducts(productsData);
        setLoading(false);
      } catch (error) {
        setError("Hubo un problema al cargar los productos.");
        setLoading(false);
      }
    };

    getProducts();
  }, []);

/*   useEffect(()=>{ 
    const modal = () => {
      Swal.fire({
        title: "8M DIA DE LA MUJER",
        html: "<p>En este 8M, desde BZ Print reconocemos la lucha por la igualdad.</p> No es un día de celebración, sino de <strong>reflexión y acción.</strong><br/> Por eso, acompañamos este día con promociones especiales, porque el empoderamiento también se construye con oportunidades.<br/><strong> Descubre nuestras ofertas y sigamos construyendo un futuro más justo juntos.</strong></p>",
        imageUrl: "/images/dia de la mujer.png",
        imageWidth: 400,
        imageHeight: 200,
        imageAlt: "Custom image",
        background: '#DCD0FF'
      });
    }

    modal()
  },[]) */

  useEffect(() => {
    try {
      if (loading || products.length === 0) return;

              
      let codesFind = ["121250", "154950", "237450", "237380", "121230", "61820", "116460", "35360", "36172", "155760", "29441", "51950", "116140", "121360"];

      let newProductsOFF = products.filter((p) => codesFind.includes(p.code));

      setProductsOFF(newProductsOFF);
      
      let filteredProducts = products;

      if (title) {
        filteredProducts = products.filter(
          (p) => p.title && p.title.toLowerCase().includes(title.toLowerCase())
        );
      }

      const endOffset = productOffset + productsPerPage;
      const currentProducts = filteredProducts.slice(productOffset, endOffset);

      setCurrentProducts(currentProducts);
      setPageCount(Math.max(1, Math.ceil(filteredProducts.length / productsPerPage)));
    } catch (error) {
      setError("Ocurrió un problema al procesar la paginación.");
    }
  }, [title, products, productOffset, loading]);

  const handlePageClick = (e) => {
    try {
      if (products.length === 0) return;
      const newOffset = (e.selected * productsPerPage) % products.length;
      setProductOffset(newOffset);
    } catch (error) {
      console.error("Error en el cambio de página:", error);
      setError("Ocurrió un problema al cambiar de página.");
    }
  };


  try {
    return (
      <div className="d-flex flex-column justify-content-center align-items-center">
        <div className="d-flex flex-column justify-content-center align-items-center">
          <img src={fibronesIMG} alt="" className="fibronesIMG" />
          {/* <img src={diaMujerPNG} className="diaMujerIMG" /> */}
        </div>
        <div>
          {error ? (
            <Error error = {error} />
          ) : loading ? (
            <div className="loader-Container">
              <Loader />
            </div>
          ) : (
            <div>

              <div className="carrouselContainer">
                <Carrousel/>
              </div>



              {productsOFF.length > 0 ? (
                <div>
                  <h1 className="text-center fw-bold promo-banner p-md-5 p-3"> PROMOS SEMANALES  <br /> 20% OFF</h1>
                    <ProductsOFFList productsOFF={productsOFF} />
                  <h1 className="text-center fw-bold promo-banner p-4"> Increibles promos semanales, no te las Pierdas!</h1>
                </div>
              ) : <></>}

            <h1 className="text-center fw-bold">PRODUCTOS</h1>

              <ProductsList products={currentProducts} />

              <ReactPaginate
                breakLabel="..."
                nextLabel="Siguiente >"
                onPageChange={handlePageClick}
                pageRangeDisplayed={5}
                pageCount={pageCount}
                previousLabel="< Anterior"
                renderOnZeroPageCount={null}
                containerClassName="pagination d-flex justify-content-center mt-4 p-2 flex-wrap"
                pageLinkClassName="page-link"
                previousLinkClassName="page-link"
                nextLinkClassName="page-link"
                activeClassName="active"
              />
            </div>
          )}
        </div>
      </div>
    );
  } catch (error) {
    console.error("Error en el renderizado:", error);
    return (
      <Error error = {error} />
    );
  }
};